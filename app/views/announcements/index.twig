{% extends "layout/default.twig" %}

{% block content %}
    <div style="max-width: 800px; margin: auto; padding: 20px;">
        <h2 style="text-align: center; color: #2E8B57;">Liste des announcements</h2>
        <div style="text-align: right; margin-bottom: 20px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <a href="/announcements/trash" style="text-decoration: none; padding: 10px 15px; background-color: #ff4d4d; color: white; border-radius: 5px;">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor" style="width: 20px; height: 20px; vertical-align: middle;">
                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-.894.553L4 4H2a1 1 0 000 2h1v10a2 2 0 002 2h8a2 2 0 002-2V6h1a1 1 0 100-2h-2l-.106-.447A1 1 0 0014 2H6zm3 4a1 1 0 112 0v7a1 1 0 11-2 0V6z" clip-rule="evenodd"/>
                    </svg>
                    Corbeille
                </a>
                <button onclick="openCreateModal()" style="text-decoration: none; padding: 10px 15px; background-color: #2E8B57; color: white; border-radius: 5px;">Create Announcement</button>
            </div>
        </div>
        <div id="announcements-table">
        </div>
    </div>

    <div id="createModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden">
        <div class="modal-content bg-white p-6 rounded-lg shadow-lg max-w-2xl mx-auto mt-20">
            <h2 class="text-2xl font-bold mb-4">Create New Announcement</h2>
            <form id="createForm" onsubmit="handleCreate(event)">
                <input type="hidden" name="token" value="{{ csrf_token() }}">
                
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="title">Title</label>
                    <input type="text" name="title" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700">
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="description">Description</label>
                    <textarea name="description" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" rows="4"></textarea>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="company_id">Company</label>
                    <select name="company_id" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700">
                        <option value="">Select a company</option>
                        {% for company in companies %}
                            <option value="{{ company.id }}">{{ company.name }}</option>
                        {% endfor %}
                    </select>
                </div>

                <div class="flex justify-end gap-2">
                    <button type="button" onclick="closeModal('createModal')" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
                    <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded">Create</button>
                </div>
            </form>
        </div>
    </div>

    <div id="editModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden">
        <div class="modal-content bg-white p-6 rounded-lg shadow-lg max-w-2xl mx-auto mt-20">
            <h2 class="text-2xl font-bold mb-4">Edit Announcement</h2>
            <form id="editForm" onsubmit="handleEdit(event)">
                <input type="hidden" name="token" value="{{ csrf_token() }}">
                <input type="hidden" name="id" id="edit_id">
                
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="edit_title">Title</label>
                    <input type="text" id="edit_title" name="title" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700">
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="edit_description">Description</label>
                    <textarea id="edit_description" name="description" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" rows="4"></textarea>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="edit_company_id">Company</label>
                    <select id="edit_company_id" name="company_id" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700">
                        <option value="">Select a company</option>
                        {% for company in companies %}
                            <option value="{{ company.id }}">{{ company.name }}</option>
                        {% endfor %}
                    </select>
                </div>

                <div class="flex justify-end gap-2">
                    <button type="button" onclick="closeModal('editModal')" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Update</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', loadAnnouncements);

        function loadAnnouncements() {
            fetch('/api/announcements')
                .then(response => response.text())
                .then(html => {
                    document.getElementById('announcements-table').innerHTML = html;
                });
        }

        function openCreateModal() {
            document.getElementById('createModal').classList.remove('hidden');
        }

        function openEditModal(announcement) {
            document.getElementById('edit_id').value = announcement.id;
            document.getElementById('edit_title').value = announcement.title;
            document.getElementById('edit_description').value = announcement.description;
            document.getElementById('edit_company_id').value = announcement.company_id;
            document.getElementById('editModal').classList.remove('hidden');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.add('hidden');
        }

        async function handleCreate(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            
            try {
                const response = await fetch('/api/announcements/store', {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    closeModal('createModal');
                    loadAnnouncements();
                    event.target.reset();
                } else {
                    alert('Error creating announcement');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function handleEdit(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const id = formData.get('id');
            
            try {
                const response = await fetch(`/api/announcements/update/${id}`, {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    closeModal('editModal');
                    loadAnnouncements();
                } else {
                    alert('Error updating announcement');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function handleDelete(id) {
            if (!confirm('Are you sure you want to delete this announcement?')) return;
            
            const formData = new FormData();
            formData.append('token', '{{ csrf_token() }}');

            try {
                const response = await fetch(`/api/announcements/delete/${id}`, {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    loadAnnouncements();
                } else {
                    alert('Error deleting announcement');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }
    </script>
{% endblock %}
